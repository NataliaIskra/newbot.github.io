# -*- coding: utf-8 -*-
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from collections import defaultdict
import os
import time

# --- Конфигурация ---
# Важно: Перед запуском установите переменные окружения BOT_TOKEN и ADMIN_CHAT_ID.
# На Railway это делается в настройках сервиса, во вкладке "Variables".
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID')

if BOT_TOKEN is None or ADMIN_CHAT_ID is None:
    raise ValueError("Переменные окружения BOT_TOKEN и ADMIN_CHAT_ID не установлены!")

bot = telebot.TeleBot(BOT_TOKEN)

# --- ЛОГИКА БОТА ---

user_answers = defaultdict(dict)

QUESTIONS_DATA = {
    'q1': {
        'text': 'Вы проводили неформальные интервью с клиентами (не продавая, а изучая их проблемы) за последние 3 месяца?',
        'key': 'q11',
        'answers': {
            'q1_1': "Да, регулярно (больше 5 интервью)",
            'q1_2': "Да, было несколько раз",
            'q1_3': "Не было времени/не видели смысла"
        }
    },
    'q2': {
        'text': 'Какая ключевая причина, по которой клиенты выбирают именно вас, а не ваших конкурентов?',
        'key': 'q12',
        'answers': {
            'q2_1': "Уникальное решение",
            'q2_2': "Лучшее соотношение цена/качество",
            'q2_3': "Удобство/сервис/личные отношения",
            'q2_4': "Нельзя выделить одну причину"
        }
    },
    'q3': {
        'text': 'Насколько предсказуем ваш процесс продаж? Можете ли вы с уверенностью сказать, сколько денег будет в кассе в следующем месяце?',
        'key': 'q21',
        'answers': {
            'q3_1': "Да, прогноз точный",
            'q3_2': "Прогнозируем, но часто ошибаемся",
            'q3_3': "Нет, процесс непредсказуем"
        }
    },
    'q4': {
        'text': 'Какой этап в вашей воронке продаж является самым узким местом, где теряется больше всего потенциальных сделок?',
        'key': 'q22',
        'answers': {
            'q4_1': "Привлечение (мало заявок)",
            'q4_2': "Квалификация (много нецелевых)",
            'q4_3': "Переговоры (низкая конверсия)",
            'q4_4': "Повторные продажи-клиенты уходят",
            'q4_5': "Нет формализованной воронки"
        }
    },
    'q5': {
        'text': 'Какая часть процесса продаж требует вашего обязательного личного участия?',
        'key': 'q23',
        'answers': {
            'q5_1': "Только крупные сделки",
            'q5_2': "Многие переговоры и закрытия",
            'q5_3': "Практически все этапы"
        }
    },
    'q6': {
        'text': 'Как бы вы оценили ситуацию с чистой прибылью за последние полгода?',
        'key': 'q31',
        'answers': {
            'q6_1': "Прибыль стабильна или растет",
            'q6_2': "Прибыль плавает",
            'q6_3': "Прибыль непредсказуема / не позволяет инвестировать в рост"
        }
    },
    'q7': {
        'text': 'Вы ведете анализ прибыльности в разрезе продуктов или клиентских сегментов?',
        'key': 'q32',
        'answers': {
            'q7_1': "Да, регулярно, на основе данных",
            'q7_2': "Да, но скорее на уровне интуиции",
            'q7_3': "Нет, анализ только общего результата"
        }
    },
    'q8': {
        'text': 'Представьте, что завтра вам нужно увеличить оборот в два раза. Готова ли к этому ваша операционная и финансовая модель?',
        'key': 'q33',
        'answers': {
            'q8_1': "Да, мы можем масштабироваться",
            'q8_2': "Нет, это приведет только к хаосу"
        }
    },
    'q9': {
        'text': 'Может ли ваша команда самостоятельно принимать решения и достигать результатов по своим направлениям без вашего ежедневного микроменеджмента?',
        'key': 'q41',
        'answers': {
            'q9_1': "Да, команда автономна",
            'q9_2': "Да, но требует немного контроля",
            'q9_3': "Нет, моя команда не справится"
        }
    },
    'q10': {
        'text': 'Как часто в компании меняются краткосрочные приоритеты (задачи на неделю/месяц)?',
        'key': 'q42',
        'answers': {
            'q10_1': "Редко, мы следуем плану",
            'q10_2': "Иногда, зависит от ситуации",
            'q10_3': "Приоритеты часто меняются из-за внешних факторов (реактивная работа)"
        }
    },
    'q11': {
        'text': 'Представьте, у вас появилась идея, как можно увеличить продажи на 20% (например, запустить новую акцию или изменить скрипт). Сколько времени у вас займет проверка этой гипотезы — от идеи до получения первых цифровых результатов?',
        'key': 'q51',
        'answers': {
            'q11_1': "До недели",
            'q11_2': "2-4 недели",
            'q11_3': "Больше месяца",
            'q11_4': "Мы так не работаем"
        }
    },
    'q12': {
        'text': 'Как ваша компания реагирует на неожиданные изменения на рынке (например, новый сильный конкурент, изменение законодательства, уход ключевого клиента)?',
        'key': 'q52',
        'answers': {
            'q12_1': "Быстро адаптируемся",
            'q12_2': "Реагируем, но это вызывает хаос",
            'q12_3': "Стараемся игнорировать",
            'q12_4': "На адаптацию уходит много времени и ресурсов, теряем темп"
        }
    },
    'q13': {
        'text': 'Какая стратегическая цель для вас сейчас в приоритете?',
        'key': 'q61',
        'answers': {
            'q13_1': "Построить автономный бизнес",
            'q13_2': "Достичь нужный уровень дохода",
            'q13_3': "Создать лучший продукт на рынке",
            'q13_4': "Обеспечить стабильность"
        }
    },
    'q14': {
        'text': 'Что вас, как собственника, беспокоит больше всего в текущей ситуации?',
        'key': 'q62',
        'answers': {
            'q14_1': "Медленный рост, ощущение плато",
            'q14_2': "Огромное количество операционки",
            'q14_3': "Непонятно, как управлять прибылью",
            'q14_4': "Непонятно, на чем сфокусироваться для роста",
            'q14_5': "Меня ничего не беспокоит"
        }
    }
}

def escape_markdown_v2(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

VERDICT_DATA = {
    'verdikt1': {
        'name': "Стабильность (трекинг не требуется)",
        'text': (
            'Диагностический вывод: Ваша бизнес-система работает стабильно и соответствует вашим текущим целям. '
            'Вы находитесь в точке контроля и предсказуемости.\n\n'
            'Обоснование: Трекинг — это инструмент для компаний, которые либо находятся в кризисе, либо стремятся к кратному росту, '
            'что всегда сопряжено с выходом из зоны комфорта. Судя по вашим ответам, ваш текущий запрос — это стабильность, '
            'а не интенсивный рост. В такой ситуации внешнее вмешательство может принести больше вреда, чем пользы.\n\n'
            'Рекомендация: Продолжайте делать то, что у вас отлично получается. Сохраните этот контакт (@natalia_koch). Если в будущем вы решите, '
            'что готовы к новому рывку, или почувствуете, что рынок меняется быстрее, чем вы, — это будет сигналом к тому, '
            'что пора провести повторную диагностику.'
        )
    },
    'verdikt2': {
        'name': "Стратегическое масштабирование",
        'text': (
            'Диагностический вывод: У вас выстроена эффективная операционная платформа. Бизнес работает системно и прибыльно. '
            'Это позволяет перейти от задач операционного управления к задачам стратегического масштабирования.\n\n'
            'Гипотеза о проблеме: Ваша текущая бизнес-модель, идеально оптимизированная под существующий рынок, исчерпала свой потенциал для кратного роста. Это приводит к стагнации выручки на текущем плато (ущерб в виде упущенной выгоды) и концентрирует все риски в одной рыночной нише. Дальнейший рост требует не улучшения существующих процессов, а запуска системного поиска и проверки новых источников дохода.\n\n'
            'Как трекинг может быть полезен: В роли спарринг-партнера по стратегии. Трекер поможет систематизировать работу с неопределенностью: тестировать новые рынки, каналы, продукты, не разрушая при этом работающую систему. Мы вместе проверим гипотезу о вашем ограничении и сфокусируемся на его преодолении.\n\n'
            'Предложение: Предлагаю провести стратегическую сессию (1.5 часа), чтобы сформулировать и оценить гипотезы для перехода на следующий уровень роста.'
        )
    },
    'verdikt3': {
        'name': "Поиск точки кратного роста",
        'text': (
            'Диагностический вывод: Вы много работаете, но бизнес не растет кратно. Это указывает на то, что ваши усилия и ресурсы тратятся не на то ограничение, которое действительно сдерживает рост системы.\n\n'
            'Гипотеза о проблеме: В вашей бизнес-системе существует неочевидный системный барьер. Вероятно, вы оптимизируете то, что и так работает неплохо, в то время как настоящее "узкое место" остается без внимания.\n\n'
            'Как поможет трекер: Как системный диагност. Наша задача — найти ту единственную точку в вашей бизнес-системе, работа над которой даст максимальный результат. Мы проведем декомпозицию воронки продаж, проанализируем юнит-экономику и сфокусируем все усилия команды на одном, самом важном ограничении. Это позволит превратить хаотичные действия в целенаправленное движение к росту.\n\n'
            'Предложение: На диагностической сессии (1.5 часа) мы проведем детальный анализ и выявим то самое "узкое место", которое сдерживает ваш рост, и сформулируем первые гипотезы по его устранению.'
        )
    },
    'verdikt4': {
        'name': "Масштабирование через систему",
        'text': (
            'Диагностический вывод: Рост вашей компании ограничен скоростью одного человека — вас. Бизнес-процессы, особенно продажи, существуют в виде вашего личного опыта, а не как воспроизводимая система.\n\n'
            'Гипотеза о проблеме: Ваша глубокая вовлеченность в операционные процессы продаж не оставляет ресурсов на создание масштабируемой технологии. Каждый час, потраченный на "ручное" закрытие сделки, — это час, не вложенный в разработку системы, которая позволила бы команде делать это без вас. Это приводит к стагнации (рост ограничен вашим временем) и создает ключевую уязвимость для бизнеса.\n\n'
            'Как поможет трекер: Как методолог. Мы сфокусируемся на том, чтобы каждый ваш шаг в продажах превращался не только в деньги, но и в элемент будущей системы. Мы определим самые критичные этапы, которые можно делегировать в первую очередь, и создадим для них четкие инструкции и точки контроля. Это позволит вам постепенно выходить из операционки, не теряя в качестве, и направить свое время на стратегию.\n\n'
            'Предложение: Предлагаю на диагностической сессии (1.5 часа) составить дорожную карту по созданию системного, масштабируемого отдела продаж. Вы получите конкретный план действий.'
        )
    },
    'verdikt5': {
        'name': "Системный сбой: фокус на восстановлении управляемости",
        'text': (
            'Диагностический вывод: Ваша бизнес-система работает в реактивном режиме. Усилия расфокусированы, а решения принимаются по принципу "тушения пожаров", что не приводит к стабильному росту чистой прибыли.\n\n'
            'Гипотеза о проблеме: Процесс принятия решений в компании оторван от его влияния на чистую прибыль. Команда фокусируется на выполнении задач и "тушении пожаров", а не на действиях, которые напрямую увеличивают доход или снижают издержки. Это приводит к постоянной утечке ресурсов и не позволяет бизнесу выйти из состояния хаоса.\n\n'
            'Как поможет трекер (фокус на управляемости): Наша первая задача — вернуть вам контроль. Мы найдем одну ключевую метрику, которая напрямую связана с прибыльностью, и сделаем её главным критерием для принятия всех краткосрочных решений. Мы внедрим еженедельный цикл, в котором каждая задача будет оцениваться с точки зрения ее вклада в эту метрику. Это остановит хаос и создаст основу для предсказуемого роста.\n\n'
            'Предложение: Предлагаю провести срочную диагностическую сессию (1.5 часа). Цель — не строить долгосрочные планы, а разработать четкий антикризисный план на ближайший месяц, который остановит негативную динамику и создаст основу для управляемого роста.'
        )
    }
}

def notify_admin(user_id, data, verdict_name, verdict_full_text):
    """Отправляет уведомление с результатами анкеты администратору."""
    try:
        user_info = bot.get_chat(user_id)
        username = escape_markdown_v2(user_info.username or "N/A")
        first_name = escape_markdown_v2(user_info.first_name or "")
        message_text = (f"✅ *Новая анкета заполнена\\!* \n\n"
                        f"👤 *Пользователь:* @{username} \\({first_name}\\)\n"
                        f"🆔 *User ID:* `{user_id}`\n\n"
                        f"📝 *\\-\\-* Ответы *\\-\\-\\-*\n")
        for i in range(1, len(QUESTIONS_DATA) + 1):
            q_code = f'q{i}'
            q_key = QUESTIONS_DATA[q_code]['key']
            question_text = escape_markdown_v2(QUESTIONS_DATA[q_code]['text'])
            answer_text = escape_markdown_v2(data.get(q_key, "Ответ не найден"))
            message_text += f"\n*Вопрос {i}:* {question_text}\n_{answer_text}_\n"
        escaped_verdict_name = escape_markdown_v2(verdict_name)
        escaped_verdict_full_text = escape_markdown_v2(verdict_full_text)
        message_text += (f"\n\n\n*🏁 РЕЗУЛЬТАТ ДИАГНОСТИКИ 🏁*\n"
                         f"*Тип:* {escaped_verdict_name}\n\n"
                         f"*Полный текст для пользователя:*\n{escaped_verdict_full_text}")
        bot.send_message(ADMIN_CHAT_ID, message_text, parse_mode="MarkdownV2")
    except Exception as e:
        print(f"Ошибка при отправке админу: {e}")
        bot.send_message(ADMIN_CHAT_ID, f"Не удалось сформировать отчет по анкете от пользователя {user_id}.")

def send_verdict(chat_id, verdict_key):
    """Отправляет финальный вердикт пользователю с соответствующей кнопкой."""
    data = VERDICT_DATA[verdict_key]
    text = data['text']
    markup = InlineKeyboardMarkup()
    buttons = {
        'verdikt1': ("Спасибо, было полезно", "feedback_thanks"),
        'verdikt2': ("Запланировать стратегическую сессию", "https://t.me/natalia_koch"),
        'verdikt3': ("Провести диагностику узкого места", "https://t.me/natalia_koch"),
        'verdikt4': ("Составить план по делегированию", "https://t.me/natalia_koch"),
        'verdikt5': ("Разработать антикризисный план", "https://t.me/natalia_koch")
    }
    btn_text, btn_data = buttons.get(verdict_key)
    if verdict_key == 'verdikt1':
        markup.add(InlineKeyboardButton(btn_text, callback_data=btn_data))
    else:
        markup.add(InlineKeyboardButton(btn_text, url=btn_data))
    bot.send_message(chat_id, text, reply_markup=markup)

def ask_question(chat_id, question_code):
    """Отправляет пользователю вопрос с кнопками ответов."""
    q_data = QUESTIONS_DATA[question_code]
    markup = InlineKeyboardMarkup(row_width=1)
    for callback_data, text in q_data['answers'].items():
        markup.add(InlineKeyboardButton(text, callback_data=callback_data))
    bot.send_message(chat_id, q_data['text'], reply_markup=markup)

def analyze_results(user_id):
    """Анализирует ответы пользователя и определяет вердикт по системе баллов."""
    data = user_answers.get(user_id)
    if not data or len(data) < len(QUESTIONS_DATA):
        bot.send_message(user_id,
                         "Кажется, произошла ошибка, и я не получил все ответы. Пожалуйста, начните диагностику заново с помощью команды /start.")
        return

    q_values = {}
    for q_code, q_info in QUESTIONS_DATA.items():
        q_values[q_info['key']] = data.get(q_info['key'])

    scores = {
        'verdikt1': 0, 'verdikt2': 0, 'verdikt3': 0, 'verdikt4': 0, 'verdikt5': 0
    }

    # --- Начисление баллов на основе ответов ---
    # Баллы за СИСТЕМНЫЙ СБОЙ (verdikt5)
    if q_values.get('q31') == 'Прибыль непредсказуема / не позволяет инвестировать в рост': scores['verdikt5'] += 2
    if q_values.get('q42') == 'Приоритеты часто меняются из-за внешних факторов (реактивная работа)': scores['verdikt5'] += 2
    if q_values.get('q52') == "На адаптацию уходит много времени и ресурсов, теряем темп": scores['verdikt5'] += 1
    if q_values.get('q62') == "Непонятно, как управлять прибылью": scores['verdikt5'] += 3
    if q_values.get('q33') == "Нет, это приведет только к хаосу": scores['verdikt5'] += 1

    # Баллы за ДЕЛЕГИРОВАНИЕ (verdikt4)
    if q_values.get('q23') in ['Многие переговоры и закрытия', 'Практически все этапы']: scores['verdikt4'] += 2
    if q_values.get('q41') == 'Нет, моя команда не справиться': scores['verdikt4'] += 2
    if q_values.get('q62') == 'Огромное количество операционки': scores['verdikt4'] += 3

    # Баллы за ПЛАТО/ПОИСК РОСТА (verdikt3)
    if q_values.get('q21') == 'Нет, процесс непредсказуем': scores['verdikt3'] += 1
    if q_values.get('q31') == 'Прибыль плавает': scores['verdikt3'] += 1
    if q_values.get('q11') == 'Не было времени/не видели смысла': scores['verdikt3'] += 1
    if q_values.get('q51') in ['Больше месяца', 'Мы так не работаем']: scores['verdikt3'] += 2
    if q_values.get('q62') == "Медленный рост, ощущение плато": scores['verdikt3'] += 3

    # Баллы за СТАБИЛЬНОСТЬ (verdikt1)
    if q_values.get('q62') == "Меня ничего не беспокоит": scores['verdikt1'] = 10
    if q_values.get('q31') == 'Прибыль стабильна или растет': scores['verdikt1'] += 1
    if q_values.get('q41') == 'Да, команда автономна': scores['verdikt1'] += 1
    if q_values.get('q42') == 'Редко, мы следуем плану': scores['verdikt1'] += 1

    # Баллы за СТРАТЕГИЮ (verdikt2)
    if q_values.get('q61') != "Обеспечить стабильность": scores['verdikt2'] += 1
    if q_values.get('q33') == 'Да, мы можем масштабироваться': scores['verdikt2'] += 2

    # --- Определение финального вердикта ---
    if scores['verdikt3'] > 0 or scores['verdikt4'] > 0 or scores['verdikt5'] > 0:
        scores['verdikt1'] = -1

    if max(scores.values()) > 0:
        verdict_key = max(scores, key=scores.get)
    else:
        verdict_key = 'verdikt2'

    if scores['verdikt5'] > 0 and scores['verdikt4'] > 0:
        verdict_key = 'verdikt5' if scores['verdikt5'] >= scores['verdikt4'] else 'verdikt4'
    
    verdict_info = VERDICT_DATA[verdict_key]
    notify_admin(user_id, data, verdict_info['name'], verdict_info['text'])
    send_verdict(user_id, verdict_key)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    global user_answers
    user_id = message.chat.id
    user_answers[user_id] = {}
    welcome_text = (
        "Добрый день. Я — бот для диагностики бизнеса. Моя цель — помочь вам за 10 минут выявить ключевые зоны роста и системные ограничения и понять, нужен ли вам сейчас бизнес-трекинг."
        "\nДиалог построен на основе методологии трекинга. Давайте начнем.")
    bot.send_message(user_id, welcome_text)
    ask_question(user_id, 'q1')

@bot.callback_query_handler(func=lambda call: call.data.startswith('q'))
def handle_quiz_callback(call):
    global user_answers
    user_id = call.message.chat.id
    message_id = call.message.message_id
    bot.edit_message_reply_markup(chat_id=user_id, message_id=message_id, reply_markup=None)
    question_code = call.data.split('_')[0]
    q_data = QUESTIONS_DATA[question_code]
    answer_text = q_data['answers'][call.data]
    user_answers[user_id][q_data['key']] = answer_text
    current_q_number = int(question_code[1:])
    next_q_number = current_q_number + 1
    next_question_code = f'q{next_q_number}'
    progress_messages = {
        'q3': 'Спасибо. Пройдено 20%. Переходим к продажам.',
        'q6': 'Принято. Мы на экваторе. Теперь о финансовом здоровье.',
        'q9': 'Отлично. Пройдено 60%. Теперь об управлении и команде.',
        'q11': 'Принято. Пройдено 80%. Теперь очень важный блок о скорости и гибкости.',
        'q13': 'Финальный рывок! Остался последний блок — о вас и будущем.'
    }
    if next_question_code in progress_messages:
        bot.send_message(user_id, progress_messages[next_question_code])
    if next_question_code in QUESTIONS_DATA:
        ask_question(user_id, next_question_code)
    else:
        bot.send_message(user_id, 'Спасибо, это был последний вопрос. Готовлю для вас персональный вывод...')
        analyze_results(user_id)

@bot.callback_query_handler(func=lambda call: call.data == "feedback_thanks")
def callback_inline(call):
    bot.answer_callback_query(call.id, "Спасибо за ваш отзыв!")
    text = escape_markdown_v2(call.message.text) + "\n\n✅ *Отзыв получен, спасибо\\!*"
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=text,
                          parse_mode="MarkdownV2", reply_markup=None)

if __name__ == '__main__':
    while True:
        try:
            print("Бот запущен (polling)...")
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"Критическая ошибка: {e}")
            print("Перезапуск через 15 секунд...")
            time.sleep(15)
