# -*- coding: utf-8 -*-
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from collections import defaultdict
import os
import threading
from flask import Flask

# --- Конфигурация ---
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID')

if BOT_TOKEN is None or ADMIN_CHAT_ID is None:
    raise ValueError("Переменные окружения BOT_TOKEN и ADMIN_CHAT_ID не установлены!")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# --- ВЕСЬ ВАШ КОД БОТА (QUESTIONS_DATA, VERDICT_DATA, обработчики) ИДЕТ ЗДЕСЬ ---
# ... (просто скопируйте сюда всю вашу логику без изменений) ...
# <... Начало вашего кода ...>
# Глобальный словарь для хранения ответов пользователей
user_answers = defaultdict(dict)

# --- Тексты вопросов и ответов (без изменений) ---
QUESTIONS_DATA = {
    'q1': {
        'text': 'Вы проводили неформальные интервью с клиентами (не продавая, а изучая их проблемы) за последние 3 месяца?',
        'key': 'q11',
        'answers': {
            'q1_1': "Да, регулярно (больше 5 интервью)",
            'q1_2': "Да, было несколько раз",
            'q1_3': "Не было времени/не видели смысла"
        }
    },
    'q2': {
        'text': 'Какая ключевая причина, по которой клиенты выбирают именно вас, а не ваших конкурентов?',
        'key': 'q12',
        'answers': {
            'q2_1': "Уникальное решение",
            'q2_2': "Лучшее соотношение цена/качество",
            'q2_3': "Удобство/сервис/личные отношения",
            'q2_4': "Нельзя выделить одну причину"
        }
    },
    'q3': {
        'text': 'Насколько предсказуем ваш процесс продаж? Можете ли вы с уверенностью сказать, сколько денег будет в кассе в следующем месяце?',
        'key': 'q21',
        'answers': {
            'q3_1': "Да, прогноз точный",
            'q3_2': "Прогнозируем, но часто ошибаемся",
            'q3_3': "Нет, процесс непредсказуем"
        }
    },
    'q4': {
        'text': 'Какой этап в вашей воронке продаж является самым узким местом, где теряется больше всего потенциальных сделок?',
        'key': 'q22',
        'answers': {
            'q4_1': "Привлечение (мало заявок)",
            'q4_2': "Квалификация (много нецелевых)",
            'q4_3': "Переговоры (низкая конверсия)",
            'q4_4': "Повторные продажи-клиенты уходят",
            'q4_5': "Нет формализованной воронки"
        }
    },
    'q5': {
        'text': 'Какая часть процесса продаж требует вашего обязательного личного участия?',
        'key': 'q23',
        'answers': {
            'q5_1': "Только крупные сделки",
            'q5_2': "Многие переговоры и закрытия",
            'q5_3': "Практически все этапы"
        }
    },
    'q6': {
        'text': 'Как бы вы оценили ситуацию с чистой прибылью за последние полгода?',
        'key': 'q31',
        'answers': {
            'q6_1': "Прибыль стабильна или растет",
            'q6_2': "Прибыль плавает",
            'q6_3': "Работаем в ноль или в убыток"
        }
    },
    'q7': {
        'text': 'Вы ведете анализ прибыльности в разрезе продуктов или клиентских сегментов?',
        'key': 'q32',
        'answers': {
            'q7_1': "Да, регулярно, на основе данных",
            'q7_2': "Да, но скорее на уровне интуиции",
            'q7_3': "Нет, анализ только результата"
        }
    },
    'q8': {
        'text': 'Представьте, что завтра вам нужно увеличить оборот в два раза. Готова ли к этому ваша операционная и финансовая модель?',
        'key': 'q33',
        'answers': {
            'q8_1': "Да, мы можем масштабироваться",
            'q8_2': "Нет, это приведет только к хаосу"
        }
    },
    'q9': {
        'text': 'Может ли ваша команда самостоятельно принимать решения и достигать результатов по своим направлениям без вашего ежедневного микроменеджмента?',
        'key': 'q41',
        'answers': {
            'q9_1': "Да, команда автономна",
            'q9_2': "Да, но требует немного контроля",
            'q9_3': "Нет, моя команда не справится"
        }
    },
    'q10': {
        'text': 'Как часто в компании меняются краткосрочные приоритеты (задачи на неделю/месяц)?',
        'key': 'q42',
        'answers': {
            'q10_1': "Редко, мы следуем плану",
            'q10_2': "Иногда, зависит от ситуации",
            'q10_3': "Постоянно, тушим пожары"
        }
    },
    'q11': {
        'text': 'Представьте, у вас появилась идея, как можно увеличить продажи на 20% (например, запустить новую акцию или изменить скрипт). Сколько времени у вас займет проверка этой гипотезы — от идеи до получения первых цифровых результатов?',
        'key': 'q51',
        'answers': {
            'q11_1': "До недели",
            'q11_2': "2-4 недели",
            'q11_3': "Больше месяца",
            'q11_4': "Мы так не работаем"
        }
    },
    'q12': {
        'text': 'Как ваша компания реагирует на неожиданные изменения на рынке (например, новый сильный конкурент, изменение законодательства, уход ключевого клиента)?',
        'key': 'q52',
        'answers': {
            'q12_1': "Быстро адаптируемся",
            'q12_2': "Реагируем, но это вызывает хаос",
            'q12_3': "Стараемся игнорировать",
            'q12_4': "Любые изменения рушат ход дел"
        }
    },
    'q13': {
        'text': 'Какая стратегическая цель для вас сейчас в приоритете?',
        'key': 'q61',
        'answers': {
            'q13_1': "Построить автономный бизнес",
            'q13_2': "Достичь нужный уровень дохода",
            'q13_3': "Создать лучший продукт на рынке",
            'q13_4': "Обеспечить стабильность"
        }
    },
    'q14': {
        'text': 'Что вас, как собственника, беспокоит больше всего в текущей ситуации?',
        'key': 'q62',
        'answers': {
            'q14_1': "Медленный рост, ощущение плато",
            'q14_2': "Огромное количество операционки",
            'q14_3': "Финансовая нестабильность",
            'q14_4': "Нету видения, куда двигаться",
            'q14_5': "Меня ничего не беспокоит"
        }
    }
}


# --- Надежная функция экранирования ---
def escape_markdown_v2(text: str) -> str:
    """Экранирует все специальные символы для Telegram MarkdownV2."""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)


# --- Структура данных для вердиктов ---
VERDICT_DATA = {
    'verdikt1': {
        'name': "Стабильность (трекинг не требуется)",
        'text': (
            'Диагностический вывод: Ваша бизнес-система работает стабильно и соответствует вашим текущим целям. '
            'Вы находитесь в точке контроля и предсказуемости.\n\n'
            'Обоснование: Трекинг — это инструмент для компаний, которые либо находятся в кризисе, либо стремятся к кратному росту, '
            'что всегда сопряжено с выходом из зоны комфорта. Судя по вашим ответам, ваш текущий запрос — это стабильность, '
            'а не интенсивный рост. В такой ситуации внешнее вмешательство может принести больше вреда, чем пользы.\n\n'
            'Рекомендация: Продолжайте делать то, что у вас отлично получается. Сохраните этот контакт (@natalia_koch). Если в будущем вы решите, '
            'что готовы к новому рывку, или почувствуете, что рынок меняется быстрее, чем вы, — это будет сигналом к тому, '
            'что пора провести повторную диагностику.'
        )
    },
    'verdikt2': {
        'name': "Стратегическое масштабирование",
        'text': (
            'Диагностический вывод: У вас выстроена эффективная операционная платформа. Бизнес работает системно и прибыльно. '
            'Это позволяет перейти от задач операционного управления к задачам стратегического масштабирования.\n\n'
            'Текущая точка роста: Ваш главный вызов сейчас — не оптимизация текущих процессов, а поиск и проверка гипотез нового уровня, '
            'которые могут дать кратный рост.\n\n'
            'Как трекинг может быть полезен: В роли спарринг-партнера по стратегии. Трекер поможет систематизировать работу с '
            'неопределенностью: тестировать новые рынки, каналы, продукты, не разрушая при этом работающую систему. Мы вместе '
            'определим ключевое ограничение вашего масштаба и сфокусируемся на его преодолении.\n\n'
            'Предложение: Предлагаю провести стратегическую сессию (1.5 часа), чтобы сформулировать и оценить гипотезы '
            'для перехода на следующий уровень роста.'
        )
    },
    'verdikt3': {
        'name': "Диагностика узкого места",
        'text': (
            'Диагностический вывод: В вашем бизнесе наблюдается разрыв между желаемыми целями и реальными операционными результатами. '
            'Система не справляется с поставленными задачами.\n\n'
            'Корневая проблема: Скорее всего, существует неочевидное ограничение в воронке продаж или в экономике продукта. '
            'Усилия, которые вы прикладываете, не ведут к росту чистой прибыли, потому что направлены не на устранение этого ограничения.\n\n'
            'Как поможет трекер: Как системный диагност. Наша задача — найти и устранить корневую причину этого разрыва. '
            'Проведем декомпозицию воронки продаж, чтобы найти этап с максимальными потерями. Проанализируем экономику ключевых сделок, '
            'чтобы отделить прибыльных клиентов от убыточных. Сформируем недельный цикл работы с фокусом на одном, самом важном ограничении.\n\n'
            'Предложение: На диагностической сессии (1.5 часа) мы проведем детальный анализ и выявим то самое "узкое место", '
            'которое сдерживает ваш рост.'
        )
    },
    'verdikt4': {
        'name': "План по делегированию",
        'text': (
            'Диагностический вывод: Ключевые бизнес-процессы, в первую очередь продажи, критически зависят от вашего личного участия. '
            'Это является основным ограничением для роста компании.\n\n'
            'Корневая проблема: Отсутствие формализованной и переданной команде технологии работы. Пока вы единственный носитель '
            'ключевых компетенций, бизнес не может масштабироваться.\n\n'
            'Как поможет трекер: Как методолог. Мы сфокусируемся на "распаковке" вашего опыта и превращении его в работающую систему. '
            'Формализуем ваш подход к продажам в виде понятного алгоритма. Разработаем план поэтапного делегирования этой функции команде '
            'с точками контроля. Внедрим управленческие ритуалы, которые позволят вам контролировать результат, не погружаясь в процесс.\n\n'
            'Предложение: Предлагаю на диагностической сессии (1.5 часа) составить дорожную карту по снижению зависимости бизнеса от вас. '
            'Вы получите конкретный план действий.'
        )
    },
    'verdikt5': {
        'name': "Антикризисная диагностика",
        'text': (
            'Диагностический вывод: Бизнес находится в режиме высокой турбулентности. Отсутствует финансовая предсказуемость и управленческий фокус, что создает системные риски.\n\n'
            'Корневая проблема: Действия не синхронизированы с их влиянием на ключевые финансовые показатели. Решения принимаются в '
            'ответ на внешние раздражители ("пожары"), а не на основе данных и стратегических приоритетов.\n\n'
            'Как поможет трекер (антикризисный фокус): Как навигатор в шторм. Стабилизация: Первоочередная задача — найти и устранить '
            'причину финансовой нестабильности (кассовых разрывов, убытков). Фокус: Мы определим одну ключевую метрику, которая напрямую '
            'влияет на эту проблему, и сфокусируем все ресурсы на ней. Контроль: Мы внедрим еженедельный цикл, который вернет вам '
            'управляемость и предсказуемость.\n\n'
            'Предложение: Рекомендую провести срочную диагностическую сессию (1.5 часа). Цель — не строить долгосрочные планы, '
            'а разработать четкий антикризисный план на ближайший месяц.'
        )
    }
}


# --- Функция notify_admin ---
def notify_admin(user_id, data, verdict_name, verdict_full_text):
    try:
        user_info = bot.get_chat(user_id)
        username = escape_markdown_v2(user_info.username or "N/A")
        first_name = escape_markdown_v2(user_info.first_name or "")

        message_text = f"✅ *Новая анкета заполнена\\!* \n\n"
        message_text += f"👤 *Пользователь:* @{username} \\({first_name}\\)\n"
        message_text += f"🆔 *User ID:* `{user_id}`\n\n"
        message_text += f"📝 *\\-\\-\\- Ответы \\-\\-\\-*\n"

        for i in range(1, len(QUESTIONS_DATA) + 1):
            q_code = f'q{i}'
            q_key = QUESTIONS_DATA[q_code]['key']
            question_text = escape_markdown_v2(QUESTIONS_DATA[q_code]['text'])
            answer_text = escape_markdown_v2(data.get(q_key, "Ответ не найден"))
            message_text += f"\n*Вопрос {i}:* {question_text}\n"
            message_text += f"_{answer_text}_\n"

        escaped_verdict_name = escape_markdown_v2(verdict_name)
        escaped_verdict_full_text = escape_markdown_v2(verdict_full_text)

        message_text += f"\n\n\n*🏁 РЕЗУЛЬТАТ ДИАГНОСТИКИ 🏁*\n"
        message_text += f"*Тип:* {escaped_verdict_name}\n\n"
        message_text += f"*Полный текст для пользователя:*\n{escaped_verdict_full_text}"

        bot.send_message(ADMIN_CHAT_ID, message_text, parse_mode="MarkdownV2")
    except Exception as e:
        print(f"Ошибка при отправке админу: {e}")
        bot.send_message(ADMIN_CHAT_ID, f"Не удалось сформировать отчет по анкете от пользователя {user_id}.")


# --- Упрощенная функция отправки вердиктов ---
def send_verdict(chat_id, verdict_key):
    """Универсальная функция для отправки любого вердикта."""
    data = VERDICT_DATA[verdict_key]
    text = data['text']

    markup = InlineKeyboardMarkup()
    if verdict_key == 'verdikt1':
        markup.add(InlineKeyboardButton("Спасибо, было полезно", callback_data="feedback_thanks"))
    elif verdict_key == 'verdikt2':
        markup.add(InlineKeyboardButton("Запланировать стратегическую сессию", url="https://t.me/natalia_koch"))
    elif verdict_key == 'verdikt3':
        markup.add(InlineKeyboardButton("Провести диагностику узкого места", url="https://t.me/natalia_koch"))
    elif verdict_key == 'verdikt4':
        markup.add(InlineKeyboardButton("Составить план по делегированию", url="https://t.me/natalia_koch"))
    elif verdict_key == 'verdikt5':
        markup.add(InlineKeyboardButton("Записаться на антикризисную диагностику", url="https://t.me/natalia_koch"))

    bot.send_message(chat_id, text, reply_markup=markup)


# --- ОСНОВНАЯ ЛОГИКА БОТА ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    global user_answers
    user_id = message.chat.id
    user_answers[user_id] = {}
    welcome_text = (
        "Добрый день. Я — бот для диагностики бизнеса. Моя цель — помочь вам за 10 минут выявить ключевые зоны роста и системные ограничения и понять, нужен ли вам сейчас бизнес-трекинг."
        "\nДиалог построен на основе методологии трекинга. Давайте начнем.")
    bot.send_message(user_id, welcome_text)
    ask_question(user_id, 'q1')


def ask_question(chat_id, question_code):
    q_data = QUESTIONS_DATA[question_code]
    markup = InlineKeyboardMarkup(row_width=1)
    for callback_data, text in q_data['answers'].items():
        markup.add(InlineKeyboardButton(text, callback_data=callback_data))
    bot.send_message(chat_id, q_data['text'], reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('q'))
def handle_quiz_callback(call):
    global user_answers
    user_id = call.message.chat.id
    message_id = call.message.message_id
    bot.edit_message_reply_markup(chat_id=user_id, message_id=message_id, reply_markup=None)

    question_code = call.data.split('_')[0]
    q_data = QUESTIONS_DATA[question_code]
    answer_text = q_data['answers'][call.data]
    user_answers[user_id][q_data['key']] = answer_text

    current_q_number = int(question_code[1:])
    next_q_number = current_q_number + 1
    next_question_code = f'q{next_q_number}'

    if next_question_code == 'q3':
        bot.send_message(user_id, 'Спасибо. Пройдено 20%. Переходим к продажам.')
    elif next_question_code == 'q6':
        bot.send_message(user_id, 'Принято. Мы на экваторе. Теперь о финансовом здоровье.')
    elif next_question_code == 'q9':
        bot.send_message(user_id, 'Отлично. Пройдено 60%. Теперь об управлении и команде.')
    elif next_question_code == 'q11':
        bot.send_message(user_id, 'Принято. Пройдено 80%. Теперь очень важный блок о скорости и гибкости.')
    elif next_question_code == 'q13':
        bot.send_message(user_id, 'Финальный рывок! Остался последний блок — о вас и будущем.')

    if next_question_code in QUESTIONS_DATA:
        ask_question(user_id, next_question_code)
    else:
        bot.send_message(user_id, 'Спасибо, это был последний вопрос. Готовлю для вас персональный вывод...')
        analyze_results(user_id)


# --- Функция analyze_results ---
def analyze_results(user_id):
    data = user_answers.get(user_id)
    if not data or len(data) < len(QUESTIONS_DATA):
        bot.send_message(user_id,
                         "Кажется, произошла ошибка, и я не получил все ответы. Пожалуйста, начните диагностику заново с помощью команды /start.")
        return

    q11, q21, q23 = data['q11'], data['q21'], data['q23']
    q31, q41, q42 = data['q31'], data['q41'], data['q42']
    q51, q52, q61, q62 = data['q51'], data['q52'], data['q61'], data['q62']

    verdict_key = 'verdikt2'
    if (
            q31 == 'Работаем в ноль или в убыток' and q42 == 'Постоянно, тушим пожары' and q52 == "Любые изменения рушат ход дел") or (
            q62 == "Финансовая нестабильность"):
        verdict_key = 'verdikt5'
    elif (q23 in ['Многие переговоры и закрытия', 'Практически все этапы']) and (
            q41 == 'Нет, моя команда не справиться') and (q62 == 'Огромное количество операционки'):
        verdict_key = 'verdikt4'
    elif (q21 == 'Нет, процесс непредсказуем') and (q31 == 'Прибыль плавает') and (
            q11 == 'Не было времени/не видели смысла') and (q51 in ['Больше месяца', 'Мы так не работаем']) and (
            q62 == "Медленный рост, ощущение плато"):
        verdict_key = 'verdikt3'
    elif (
            q61 == "Обеспечить стабильность" and q31 == 'Прибыль стабильна или растет' and q41 == 'Да, команда автономна') or q62 == "Меня ничего не беспокоит":
        verdict_key = 'verdikt1'

    verdict_info = VERDICT_DATA[verdict_key]
    notify_admin(user_id, data, verdict_info['name'], verdict_info['text'])
    send_verdict(user_id, verdict_key)


@bot.callback_query_handler(func=lambda call: call.data == "feedback_thanks")
def callback_inline(call):
    bot.answer_callback_query(call.id, "Спасибо за ваш отзыв!")
    text = escape_markdown_v2(call.message.text) + "\n\n✅ *Отзыв получен, спасибо\\!*"
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text,
                          parse_mode="MarkdownV2", reply_markup=None)


# <... Конец вашего кода ...>

# --- БЛОК ДЛЯ ЗАПУСКА НА RENDER.COM ---
@app.route('/')
def index():
    return "I am alive!"


def run_web_server():
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))


if __name__ == '__main__':
    print("Запускаю веб-сервер в отдельном потоке...")
    server_thread = threading.Thread(target=run_web_server)
    server_thread.start()

    print("Запускаю бота...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"Бот упал с ошибкой: {e}")